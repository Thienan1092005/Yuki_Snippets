{
  //create redux template
  "create-redux-template": {
    "prefix": "create-reudx",
    "body": [
      "import { configureStore } from '@reduxjs/toolkit';",
      "import { useDispatch, useSelector } from 'react-redux';",
      "",
      "",
      "const store = configureStore({",
      "  reducer: {},",
      "});",
      "",
      "export const useAppDispatch = useDispatch.withTypes<AppDispatch>();",
      "export const useAppSelector = useSelector.withTypes<RootState>();",
      "",
      "export default store;",
      "export type RootState = ReturnType<typeof store.getState>;",
      "export type AppDispatch = typeof store.dispatch;",
      "export type AppStore = typeof store;"
    ],
    "description": "create-redux-template"
  },
  //create redux slice template
  "Create Redux Slice": {
    "prefix": "create-slice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit';",
      "import { RootState } from '../store';",
      "",
      "type ${1:SliceName}State = {};",
      "",
      "const initialState: ${1:SliceName}State = {};",
      "",
      "const ${1:SliceName}Slice = createSlice({",
      "  name: '${1:SliceName}',",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export default ${1:SliceName}Slice.reducer;",
      "",
      "export const { } = ${1:SliceName}Slice.actions;",
      "",
      "export const select${1:SliceName} = (state: RootState) => state.${1:SliceName};"
    ],
    "description": "Create a Redux slice with a customizable name"
  }
}
